/** \brief
 *  实现Matlab中的Wavelet工具箱中的Wrcoef
 *  具体实现的小波基函数式sym8
 *  对于不同的小波基函数只需要替换滤波器参数即可。
 *  
 *  \return
 *
 */
#include <iostream>
#include <string.h>
#include "wavelet.h"
#include "wavelet.cpp"

using namespace Vector;
// Explicit template instantiation
template class Decomposition1D<double>;
template class Wavelet<double>;

int main()
{
    //Filters definition of Discrete sym8 transfrom
    const std::vector<double> Lo_D =
    {
        -0.0033824159510061256,
            -0.00054213233179114812,
            0.031695087811492981,
            0.0076074873249176054,
            -0.14329423835080971,
            -0.061273359067658524,
            0.48135965125837221,
            0.77718575170052351,
            0.3644418948353314,
            -0.051945838107709037,
            -0.027219029917056003,
            0.049137179673607506,
            0.0038087520138906151,
            -0.014952258337048231,
            -0.0003029205147213668,
            0.0018899503327594609
        };
    const std::vector<double> Hi_D =
    {
        -0.0018899503327594609,
            -0.0003029205147213668,
            0.014952258337048231,
            0.0038087520138906151,
            -0.049137179673607506,
            -0.027219029917056003,
            0.051945838107709037,
            0.3644418948353314,
            -0.77718575170052351,
            0.48135965125837221,
            0.061273359067658524,
            -0.14329423835080971,
            -0.0076074873249176054,
            0.031695087811492981,
            0.00054213233179114812,
            -0.0033824159510061256
        };
    const std::vector<double> Lo_R =
    {
        0.0018899503327594609,
        -0.0003029205147213668,
        -0.014952258337048231,
        0.0038087520138906151,
        0.049137179673607506,
        -0.027219029917056003,
        -0.051945838107709037,
        0.3644418948353314,
        0.77718575170052351,
        0.48135965125837221,
        -0.061273359067658524,
        -0.14329423835080971,
        0.0076074873249176054,
        0.031695087811492981,
        -0.00054213233179114812,
        -0.0033824159510061256
    };
    const std::vector<double> Hi_R =
    {
        -0.0033824159510061256,
            0.00054213233179114812,
            0.031695087811492981,
            -0.0076074873249176054,
            -0.14329423835080971,
            0.061273359067658524,
            0.48135965125837221,
            -0.77718575170052351,
            0.3644418948353314,
            0.051945838107709037,
            -0.027219029917056003,
            -0.049137179673607506,
            0.0038087520138906151,
            0.014952258337048231,
            -0.0003029205147213668,
            -0.0018899503327594609
    };
    // Example Data , the size need to exeed 256
    const std::vector<double> inputvector{ 2, 3 , 1 , 354 , 1552, 1222, 333 , 154 , 335, 1541 ,2 ,123,154,1354,1654,1688,33 };

    // Instantiate a Wavelet object with sym8 filters
    const Wavelet<double> sym8(Lo_D, Hi_D, Lo_R, Hi_R);
    // 输入数据是vector形式，第二个参数对于sym8而言固定为8（小波分解8层）
    Decomposition1D<double> dec1D = sym8.Wavedec(inputvector, 8);

    // 这里的 l 插入inputvector中的长度，结果对应于Matlab中的 l
    std::vector<double> l = dec1D.GetLen();
    l.push_back(inputvector.size());

    // 这里的 c 对应于 Matlab钟的 c
    std::vector<std::vector<double>> c = dec1D.GetCoef();
    // 这里对于第四个参数，可以自定义重构层次，8指的是使用第8层次的系数进行小波重构。
    // 第五个参数意为对于d系数进行重构，另一个选择是a系数。
    std::vector<double> result =sym8.Wrcoef(dec1D,l,c,8,d);

    std::cout << result << std::endl;
    return 0;
}

